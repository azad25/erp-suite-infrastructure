syntax = "proto3";

package finance;

service FinanceService {
  // Invoice management
  rpc GetInvoice(GetInvoiceRequest) returns (Invoice);
  rpc GetInvoicesByIds(GetInvoicesByIdsRequest) returns (GetInvoicesByIdsResponse);
  rpc GetInvoices(GetInvoicesRequest) returns (GetInvoicesResponse);
  rpc CreateInvoice(CreateInvoiceRequest) returns (Invoice);
  rpc UpdateInvoice(UpdateInvoiceRequest) returns (Invoice);
  rpc SendInvoice(SendInvoiceRequest) returns (SendInvoiceResponse);
  rpc DeleteInvoice(DeleteInvoiceRequest) returns (DeleteInvoiceResponse);
  
  // Invoice line items
  rpc GetInvoiceLineItemsByIds(GetInvoiceLineItemsByIdsRequest) returns (GetInvoiceLineItemsByIdsResponse);
  rpc GetInvoiceLineItemsByInvoiceIds(GetInvoiceLineItemsByInvoiceIdsRequest) returns (GetInvoiceLineItemsByInvoiceIdsResponse);
  
  // Payment management
  rpc GetPayment(GetPaymentRequest) returns (Payment);
  rpc GetPaymentsByIds(GetPaymentsByIdsRequest) returns (GetPaymentsByIdsResponse);
  rpc GetPayments(GetPaymentsRequest) returns (GetPaymentsResponse);
  rpc RecordPayment(RecordPaymentRequest) returns (Payment);
  rpc ProcessPayment(ProcessPaymentRequest) returns (ProcessPaymentResponse);
  
  // Account management
  rpc GetAccount(GetAccountRequest) returns (Account);
  rpc GetAccounts(GetAccountsRequest) returns (GetAccountsResponse);
  rpc CreateAccount(CreateAccountRequest) returns (Account);
  rpc UpdateAccount(UpdateAccountRequest) returns (Account);
  
  // Financial reports
  rpc GetIncomeStatement(GetIncomeStatementRequest) returns (IncomeStatement);
  rpc GetBalanceSheet(GetBalanceSheetRequest) returns (BalanceSheet);
  rpc GetCashFlow(GetCashFlowRequest) returns (CashFlow);
  
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Enums
enum InvoiceStatus {
  INVOICE_STATUS_DRAFT = 0;
  INVOICE_STATUS_SENT = 1;
  INVOICE_STATUS_PAID = 2;
  INVOICE_STATUS_OVERDUE = 3;
  INVOICE_STATUS_CANCELLED = 4;
}

enum PaymentMethod {
  PAYMENT_METHOD_CASH = 0;
  PAYMENT_METHOD_CREDIT_CARD = 1;
  PAYMENT_METHOD_BANK_TRANSFER = 2;
  PAYMENT_METHOD_CHECK = 3;
  PAYMENT_METHOD_PAYPAL = 4;
  PAYMENT_METHOD_STRIPE = 5;
}

enum PaymentStatus {
  PAYMENT_STATUS_PENDING = 0;
  PAYMENT_STATUS_COMPLETED = 1;
  PAYMENT_STATUS_FAILED = 2;
  PAYMENT_STATUS_REFUNDED = 3;
}

enum AccountType {
  ACCOUNT_TYPE_ASSET = 0;
  ACCOUNT_TYPE_LIABILITY = 1;
  ACCOUNT_TYPE_EQUITY = 2;
  ACCOUNT_TYPE_REVENUE = 3;
  ACCOUNT_TYPE_EXPENSE = 4;
}

// Messages
message Invoice {
  string id = 1;
  string invoice_number = 2;
  string customer_id = 3;
  InvoiceStatus status = 4;
  int64 issue_date = 5;
  int64 due_date = 6;
  double subtotal = 7;
  double tax_amount = 8;
  double total_amount = 9;
  string currency = 10;
  string notes = 11;
  int64 created_at = 12;
  int64 updated_at = 13;
  string organization_id = 14;
}

message InvoiceLineItem {
  string id = 1;
  string invoice_id = 2;
  string product_id = 3;
  string description = 4;
  int32 quantity = 5;
  double unit_price = 6;
  double tax_rate = 7;
  double amount = 8;
  int64 created_at = 9;
}

message Payment {
  string id = 1;
  string invoice_id = 2;
  double amount = 3;
  int64 payment_date = 4;
  PaymentMethod method = 5;
  string reference = 6;
  PaymentStatus status = 7;
  string notes = 8;
  int64 created_at = 9;
  string organization_id = 10;
}

message Account {
  string id = 1;
  string code = 2;
  string name = 3;
  AccountType type = 4;
  string parent_id = 5;
  double balance = 6;
  string description = 7;
  bool is_active = 8;
  int64 created_at = 9;
  int64 updated_at = 10;
  string organization_id = 11;
}

message IncomeStatement {
  int64 period_start = 1;
  int64 period_end = 2;
  double total_revenue = 3;
  double total_expenses = 4;
  double net_income = 5;
  repeated IncomeStatementLine revenue_lines = 6;
  repeated IncomeStatementLine expense_lines = 7;
}

message IncomeStatementLine {
  string account_id = 1;
  string account_name = 2;
  double amount = 3;
}

message BalanceSheet {
  int64 as_of_date = 1;
  double total_assets = 2;
  double total_liabilities = 3;
  double total_equity = 4;
  repeated BalanceSheetLine asset_lines = 5;
  repeated BalanceSheetLine liability_lines = 6;
  repeated BalanceSheetLine equity_lines = 7;
}

message BalanceSheetLine {
  string account_id = 1;
  string account_name = 2;
  double amount = 3;
}

message CashFlow {
  int64 period_start = 1;
  int64 period_end = 2;
  double operating_cash_flow = 3;
  double investing_cash_flow = 4;
  double financing_cash_flow = 5;
  double net_cash_flow = 6;
  repeated CashFlowLine operating_lines = 7;
  repeated CashFlowLine investing_lines = 8;
  repeated CashFlowLine financing_lines = 9;
}

message CashFlowLine {
  string description = 1;
  double amount = 2;
}

// Request/Response messages
message GetInvoiceRequest {
  string id = 1;
}

message GetInvoicesByIdsRequest {
  repeated string ids = 1;
}

message GetInvoicesByIdsResponse {
  repeated Invoice items = 1;
}

message GetInvoicesRequest {
  InvoiceStatus status = 1;
  string customer_id = 2;
  int64 date_from = 3;
  int64 date_to = 4;
  double amount_min = 5;
  double amount_max = 6;
  int32 limit = 7;
  int32 offset = 8;
  string sort_field = 9;
  string sort_direction = 10;
}

message GetInvoicesResponse {
  repeated Invoice invoices = 1;
  int32 total_count = 2;
  bool has_next_page = 3;
}

message CreateInvoiceRequest {
  string customer_id = 1;
  string invoice_number = 2;
  int64 issue_date = 3;
  int64 due_date = 4;
  string currency = 5;
  repeated CreateInvoiceLineItemRequest line_items = 6;
  string notes = 7;
}

message CreateInvoiceLineItemRequest {
  string product_id = 1;
  string description = 2;
  int32 quantity = 3;
  double unit_price = 4;
  double tax_rate = 5;
}

message UpdateInvoiceRequest {
  string id = 1;
  int64 due_date = 2;
  repeated CreateInvoiceLineItemRequest line_items = 3;
  string notes = 4;
}

message SendInvoiceRequest {
  string id = 1;
  string email = 2;
  string subject = 3;
  string message = 4;
}

message SendInvoiceResponse {
  bool success = 1;
  string message = 2;
}

message DeleteInvoiceRequest {
  string id = 1;
}

message DeleteInvoiceResponse {
  bool success = 1;
}

message GetInvoiceLineItemsByIdsRequest {
  repeated string ids = 1;
}

message GetInvoiceLineItemsByIdsResponse {
  repeated InvoiceLineItem items = 1;
}

message GetInvoiceLineItemsByInvoiceIdsRequest {
  repeated string invoice_ids = 1;
}

message GetInvoiceLineItemsByInvoiceIdsResponse {
  repeated InvoiceLineItem line_items = 1;
}

message GetPaymentRequest {
  string id = 1;
}

message GetPaymentsByIdsRequest {
  repeated string ids = 1;
}

message GetPaymentsByIdsResponse {
  repeated Payment items = 1;
}

message GetPaymentsRequest {
  string invoice_id = 1;
  PaymentMethod method = 2;
  PaymentStatus status = 3;
  int64 date_from = 4;
  int64 date_to = 5;
  int32 limit = 6;
  int32 offset = 7;
}

message GetPaymentsResponse {
  repeated Payment payments = 1;
  int32 total_count = 2;
  bool has_next_page = 3;
}

message RecordPaymentRequest {
  string invoice_id = 1;
  double amount = 2;
  int64 payment_date = 3;
  PaymentMethod method = 4;
  string reference = 5;
  string notes = 6;
}

message ProcessPaymentRequest {
  string payment_id = 1;
  string gateway = 2;
  string gateway_transaction_id = 3;
}

message ProcessPaymentResponse {
  bool success = 1;
  string message = 2;
  string transaction_id = 3;
}

message GetAccountRequest {
  string id = 1;
}

message GetAccountsRequest {
  AccountType type = 1;
  string parent_id = 2;
  bool is_active = 3;
  int32 limit = 4;
  int32 offset = 5;
}

message GetAccountsResponse {
  repeated Account accounts = 1;
  int32 total_count = 2;
  bool has_next_page = 3;
}

message CreateAccountRequest {
  string code = 1;
  string name = 2;
  AccountType type = 3;
  string parent_id = 4;
  string description = 5;
}

message UpdateAccountRequest {
  string id = 1;
  string name = 2;
  string description = 3;
  bool is_active = 4;
}

message GetIncomeStatementRequest {
  int64 period_start = 1;
  int64 period_end = 2;
}

message GetBalanceSheetRequest {
  int64 as_of_date = 1;
}

message GetCashFlowRequest {
  int64 period_start = 1;
  int64 period_end = 2;
}

message HealthCheckRequest {}

message HealthCheckResponse {
  string status = 1;
  int64 timestamp = 2;
}