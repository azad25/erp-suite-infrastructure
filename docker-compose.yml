services:
  # ============================================================================
  # DATABASES
  # ============================================================================
  
  # PostgreSQL - Primary relational database (Phase 1: Core Database)
  postgres:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-erp_system}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack

  # MongoDB - Analytics, logs, AI conversations (Phase 2: Document Store)
  mongodb:
    image: mongo:6.0-jammy
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-mongodb
    restart: unless-stopped
    user: 1000:1000
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-erp_analytics}
    command: mongod --auth --bind_ip_all --wiredTigerCacheSizeGB 0.25
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
    # Health check removed - MongoDB is not critical for startup and auth check is expensive
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack

  # Redis - Cache, sessions, queues
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redispassword}", "ping"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack

  # Qdrant - Vector database for AI/RAG
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-qdrant
    ports:
      - "${QDRANT_HTTP_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    # Health check removed - AI service is not critical for core functionality
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack
      - ai-services

  # ============================================================================
  # MESSAGE BROKERS
  # ============================================================================

  # Kafka - Event streaming (KRaft mode - optimized for macOS)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-kafka
    user: "1000:1000"
    environment:
      # KRaft Configuration
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_INTERNAL_PORT:-29092},PLAINTEXT_HOST://0.0.0.0:${KAFKA_PORT:-9092},CONTROLLER://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_INTERNAL_PORT:-29092},PLAINTEXT_HOST://kafka:${KAFKA_PORT:-9092}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      
      # Topic Configuration (optimized for development)
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      
      # Log Configuration (reduced for faster startup)
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 268435456
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 600000
      
      # Performance Configuration (optimized for macOS)
      KAFKA_NUM_NETWORK_THREADS: 2
      KAFKA_NUM_IO_THREADS: 4
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 65536
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 65536
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 52428800
      
      # Memory optimization
      KAFKA_HEAP_OPTS: "-Xmx256m -Xms256m"
      
      # Cluster Configuration
      CLUSTER_ID: ${KAFKA_CLUSTER_ID:-MkU3OEVBNTcwNTJENDM2Qk}
    ports:
      - "${KAFKA_PORT:-9092}:${KAFKA_PORT:-9092}"
    volumes:
      - kafka_data:/var/lib/kafka/data
    # Health check removed - Kafka broker API check is expensive and not critical for startup
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack

  # ============================================================================
  # SEARCH & ANALYTICS
  # ============================================================================

  # Elasticsearch - Full-text search (optimized for macOS)
  elasticsearch:
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - xpack.ml.enabled=false
      - bootstrap.memory_lock=false
      - cluster.routing.allocation.disk.threshold_enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
      - path.repo=/usr/share/elasticsearch/backup
      - ES_TMPDIR=/tmp
      - ES_JAVA_OPTS=-Xms2g -Xmx2g -Djava.io.tmpdir=/tmp -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -XX:ErrorFile=/tmp/hs_err_pid%p.log
    init: true
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - /tmp:/tmp
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 4g
          cpus: '2.0'
        reservations:
          memory: 1g
          cpus: '0.5'
    # Health check removed - Elasticsearch cluster health check is expensive and slow to start
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack

  # Kibana - Elasticsearch UI
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.3
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      XPACK_SECURITY_ENABLED: false
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: ${KIBANA_ENCRYPTION_KEY:-a7a6311933d3503b89bc2dbc36572c01a6b9c9b0ba6d6b6b6b6b6b6b6b6b6b6b}
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    depends_on:
      - elasticsearch
    # Health check removed - Kibana depends on Elasticsearch and is not critical for startup
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack
      - logging

  # ============================================================================
  # API GATEWAY & COMMUNICATION LAYER
  # ============================================================================

  # GraphQL Gateway (Apollo Server + Express)
  graphql-gateway:
    image: node:18-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-graphql-gateway
    user: "1000:1000"
    working_dir: /app
    command: sh -c "npm install && npm run dev"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispassword}@redis:6379
      POSTGRES_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-erp_system}
      GRPC_AUTH_SERVICE: auth-service:${GRPC_AUTH_PORT:-50051}
      GRPC_CRM_SERVICE: crm-service:${GRPC_CRM_PORT:-50052}
      GRPC_HRM_SERVICE: hrm-service:${GRPC_HRM_PORT:-50053}
      GRPC_FINANCE_SERVICE: finance-service:${GRPC_FINANCE_PORT:-50054}
      GRPC_INVENTORY_SERVICE: inventory-service:${GRPC_INVENTORY_PORT:-50055}
      GRPC_PROJECT_SERVICE: project-service:${GRPC_PROJECT_PORT:-50056}
      PORT: ${GRAPHQL_GATEWAY_PORT:-4000}
      ENABLE_PLAYGROUND: ${GRAPHQL_ENABLE_PLAYGROUND:-true}
      ENABLE_INTROSPECTION: ${GRAPHQL_ENABLE_INTROSPECTION:-true}
      QUERY_CACHE_TTL: ${GRAPHQL_QUERY_CACHE_TTL:-300}
      DATALOADER_CACHE_TTL: ${GRAPHQL_DATALOADER_CACHE_TTL:-60}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      NPM_CONFIG_CACHE: /app/.npm
      NPM_CONFIG_PREFIX: /app/.npm-global
    ports:
      - "${GRAPHQL_GATEWAY_PORT:-4000}:${GRAPHQL_GATEWAY_PORT:-4000}"
    volumes:
      - ./graphql-gateway:/app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${GRAPHQL_GATEWAY_PORT:-4000}/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 45s
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack
      - api-layer

  # gRPC Service Registry & Load Balancer (Consul)
  grpc-registry:
    image: consul:1.15
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-grpc-registry
    command: consul agent -dev -client=0.0.0.0 -ui
    environment:
      CONSUL_BIND_INTERFACE: eth0
    ports:
      - "${CONSUL_PORT:-8500}:8500"
      - "${CONSUL_DNS_PORT:-8600}:8600/udp"
    volumes:
      - consul_data:/consul/data
    # Health check removed - Service discovery is not critical for startup
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack
      - api-layer

  # WebSocket Server (Node.js with Socket.IO) - Enhanced for GraphQL subscriptions
  websocket-server:
    image: node:18-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-websocket
    working_dir: /app
    command: sh -c "npm install && npm start"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispassword}@redis:6379
      GRAPHQL_GATEWAY_URL: http://graphql-gateway:${GRAPHQL_GATEWAY_PORT:-4000}/graphql
      PORT: ${WEBSOCKET_PORT:-3001}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${WEBSOCKET_PORT:-3001}:${WEBSOCKET_PORT:-3001}"
    volumes:
      - ./websocket-server:/app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${WEBSOCKET_PORT:-3001}/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 45s
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack
      - api-layer

  # ============================================================================
  # REVERSE PROXY (NGINX)
  # ============================================================================
  
  # NGINX Reverse Proxy - Main entry point for external traffic
  nginx-proxy:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-nginx-proxy
    user: "root"
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro
    depends_on:
      graphql-gateway:
        condition: service_started
      websocket-server:
        condition: service_started
      erp-frontend:
        condition: service_started
      api-gateway:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 120s
      timeout: 15s
      retries: 3
      start_period: 60s
    networks:
      - erp-network
    profiles:
      - full-stack
      - proxy

  # ============================================================================
  # SIMPLE LOGGING
  # ============================================================================
  # Note: Monitoring services (Prometheus, Grafana, Jaeger) have been removed
  # Only keeping Kibana for simple log visualization

  # ============================================================================
  # DEVELOPMENT TOOLS
  # ============================================================================

  # pgAdmin - PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:8.0
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-pgadmin
    user: "root"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@erp.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'False'
      PGADMIN_CONFIG_WTF_CSRF_ENABLED: 'False'
    command: >
      sh -c "
        mkdir -p /var/log/pgadmin /var/tmp /usr/tmp &&
        chmod 777 /var/log/pgadmin /var/tmp /usr/tmp &&
        /entrypoint.sh
      "
    ports:
      - "${PGADMIN_PORT:-8081}:80"
    volumes:
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json:ro
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack
      - dev-tools

  # Mongo Express - MongoDB management
  mongo-express:
    image: mongo-express:latest
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-mongo-express
    user: 1000:1000
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_ROOT_USERNAME:-root}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_ROOT_PASSWORD:-password}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_ROOT_USERNAME:-root}:${MONGODB_ROOT_PASSWORD:-password}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ""
      ME_CONFIG_BASICAUTH_PASSWORD: ""
      ME_CONFIG_BASICAUTH: "false"
    ports:
      - "${MONGO_EXPRESS_PORT:-8082}:8081"
    # Health check removed - Development tool, not critical for functionality
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack
      - dev-tools

  # Redis Commander - Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-redispassword}
    ports:
      - "${REDIS_COMMANDER_PORT:-8083}:8081"
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack
      - dev-tools

  # Kafka UI - Kafka management (KRaft mode compatible)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:${KAFKA_INTERNAL_PORT:-29092}
      # Note: Zookeeper configuration removed for KRaft mode
      DYNAMIC_CONFIG_ENABLED: 'true'
      LOGGING_LEVEL_COM_PROVECTUS: DEBUG
    ports:
      - "${KAFKA_UI_PORT:-8084}:8080"
    # Health check removed - Development tool, not critical for functionality
    networks:
      - erp-network
    profiles:
      - infrastructure
      - full-stack
      - dev-tools

  # ============================================================================
  # APPLICATION SERVICES (Full Stack Profile)
  # ============================================================================

  # Auth Service (Go) - Authentication and Authorization
  auth-service:
    build:
      context: ../erp-auth-service
      dockerfile: Dockerfile.dev
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-auth-service
    user: "1000:1000"
    working_dir: /app
    command: /go/bin/air -c .air.toml
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: erp_auth
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_SSL_MODE: disable
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword}
      REDIS_DB: 0
      
      # Kafka Configuration
      KAFKA_BROKERS: kafka:${KAFKA_INTERNAL_PORT:-29092}
      KAFKA_TOPIC: auth-events
      KAFKA_RETRY_ATTEMPTS: 3
      KAFKA_RETRY_BACKOFF_MS: 1000
      KAFKA_BATCH_SIZE: 100
      KAFKA_BATCH_TIMEOUT_MS: 10
      KAFKA_CONNECTION_POOL_SIZE: 10
      KAFKA_LOCAL_QUEUE_SIZE: 10000
      KAFKA_DEAD_LETTER_TOPIC: auth-events-dlq
      KAFKA_ENABLE_LOCAL_PERSISTENCE: true
      KAFKA_LOCAL_STORAGE_PATH: /tmp/kafka-events
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_ACCESS_EXPIRY: 3600
      JWT_REFRESH_EXPIRY: 604800
      JWT_KEY_ROTATION_ENABLED: false
      JWT_KEY_ROTATION_INTERVAL: 24
      JWT_REVOKE_REFRESH_ON_USE: false
      
      # Server Configuration
      PORT: ${AUTH_SERVICE_HTTP_PORT:-8080}
      GIN_MODE: debug
      ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000,http://localhost,http://localhost:4000,http://erp-frontend:3000,http://graphql-gateway:4000,http://api-gateway:8000
      
      # gRPC Configuration
      GRPC_PORT: ${AUTH_SERVICE_GRPC_PORT:-50051}
      GRPC_MAX_CONNECTION_IDLE: 300
      GRPC_MAX_CONNECTION_AGE: 300
      GRPC_MAX_CONNECTION_AGE_GRACE: 5
      GRPC_KEEPALIVE_TIME: 30
      GRPC_KEEPALIVE_TIMEOUT: 5
      GRPC_MAX_RECV_MSG_SIZE: 4194304
      GRPC_MAX_SEND_MSG_SIZE: 4194304
      GRPC_MAX_CONCURRENT_STREAMS: 1000
      GRPC_CONNECTION_TIMEOUT: 5
      GRPC_KEEPALIVE_ENFORCEMENT_MIN_TIME: 5
      GRPC_KEEPALIVE_ENFORCEMENT_PERMIT_WITHOUT_STREAM: false
      
      # Environment
      ENV: ${NODE_ENV:-development}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    ports:
      - "${AUTH_SERVICE_HTTP_PORT:-8080}:${AUTH_SERVICE_HTTP_PORT:-8080}"   # HTTP API
      - "${AUTH_SERVICE_GRPC_PORT:-50051}:${AUTH_SERVICE_GRPC_PORT:-50051}" # gRPC API
    volumes:
      - ../erp-auth-service:/app
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${AUTH_SERVICE_HTTP_PORT:-8080}/health"]
      interval: 60s
      timeout: 15s
      retries: 5
      start_period: 60s
    networks:
      - erp-network
    profiles:
      - full-stack

  # Go API Gateway - Main API Gateway
  api-gateway:
    build:
      context: ../erp-api-gateway
      dockerfile: Dockerfile
      target: development
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-api-gateway
    user: "root"
    working_dir: /app
    # Use the default CMD from Dockerfile (air for hot reload)
    # command: sh -c "go build -o /tmp/gateway cmd/server/main.go && /tmp/gateway"
    environment:
      # Server Configuration
      ERP_SERVER_HOST: 0.0.0.0
      ERP_SERVER_PORT: ${API_GATEWAY_PORT:-8000}
      PORT: ${API_GATEWAY_PORT:-8000}
      SERVER_PORT: ${API_GATEWAY_PORT:-8000}
      ERP_SERVER_READ_TIMEOUT: 30s
      ERP_SERVER_WRITE_TIMEOUT: 30s
      ERP_SERVER_SHUTDOWN_TIMEOUT: 10s
      
      # Database Configuration
      ERP_DATABASE_HOST: postgres
      ERP_DATABASE_PORT: 5432
      ERP_DATABASE_NAME: erp_gateway
      ERP_DATABASE_USER: ${POSTGRES_USER:-postgres}
      ERP_DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      ERP_DATABASE_SSL_MODE: disable
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword}
      REDIS_DB: 1
      ERP_REDIS_HOST: redis
      ERP_REDIS_PORT: 6379
      ERP_REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword}
      ERP_REDIS_DB: 1
      ERP_REDIS_POOL_SIZE: 10
      ERP_REDIS_MIN_IDLE_CONNS: 5
      ERP_REDIS_DIAL_TIMEOUT: 5s
      ERP_REDIS_READ_TIMEOUT: 3s
      ERP_REDIS_WRITE_TIMEOUT: 3s
      
      # Kafka Configuration (optional)
      KAFKA_BROKERS: kafka:${KAFKA_INTERNAL_PORT:-29092}
      KAFKA_CLIENT_ID: go-api-gateway
      ERP_KAFKA_BROKERS: kafka:${KAFKA_INTERNAL_PORT:-29092}
      ERP_KAFKA_CLIENT_ID: go-api-gateway
      ERP_KAFKA_RETRY_MAX: 3
      ERP_KAFKA_RETRY_BACKOFF: 100ms
      ERP_KAFKA_FLUSH_MESSAGES: 100
      ERP_KAFKA_FLUSH_BYTES: 1048576
      ERP_KAFKA_FLUSH_TIMEOUT: 1s
      
      # gRPC Services Configuration (only auth-service is available)
      HOST: auth-service
      GRPC_PORT: ${AUTH_SERVICE_GRPC_PORT:-50051}
      ERP_GRPC_AUTH_SERVICE_HOST: auth-service
      ERP_GRPC_AUTH_SERVICE_PORT: ${AUTH_SERVICE_GRPC_PORT:-50051}
      ERP_GRPC_AUTH_SERVICE_TIMEOUT: 10s
      ERP_GRPC_AUTH_SERVICE_MAX_RETRIES: 3
      ERP_GRPC_AUTH_SERVICE_RETRY_BACKOFF: 100ms
      
      # JWT Configuration
      ERP_JWT_JWKS_URL: http://auth-service:${AUTH_SERVICE_HTTP_PORT:-8080}/api/v1/.well-known/jwks.json
      ERP_JWT_CACHE_TTL: 1h
      ERP_JWT_ALGORITHM: RS256
      ERP_JWT_ISSUER: erp-auth-service
      
      # CORS Configuration
      ERP_SERVER_CORS_ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000,http://localhost,http://erp-frontend:3000,http://graphql-gateway:4000,http://websocket-server:3001
      ERP_SERVER_CORS_ALLOWED_METHODS: GET,POST,PUT,DELETE,OPTIONS,PATCH
      ERP_SERVER_CORS_ALLOWED_HEADERS: Authorization,Content-Type,X-Requested-With,Accept,Origin
      ERP_SERVER_CORS_ALLOW_CREDENTIALS: true
      ERP_SERVER_CORS_MAX_AGE: 86400
      
      # Logging Configuration
      ERP_LOGGING_LEVEL: ${LOG_LEVEL:-info}
      ERP_LOGGING_FORMAT: json
      ERP_LOGGING_OUTPUT: stdout
      ERP_LOGGING_BUFFER_SIZE: 1000
      ERP_LOGGING_FLUSH_INTERVAL: 5s
      ERP_LOGGING_ELASTICSEARCH_URLS: http://elasticsearch:9200
      ERP_LOGGING_ELASTICSEARCH_INDEX_NAME: go-api-gateway-logs
      
      # Environment
      ENV: ${NODE_ENV:-development}
      GO_ENV: ${NODE_ENV:-development}
      CONFIG_FILE: /app/config.yaml
    ports:
      - "${API_GATEWAY_PORT:-8000}:${API_GATEWAY_PORT:-8000}"
    volumes:
      - ../erp-api-gateway:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_GATEWAY_PORT:-8000}/health"]
      interval: 60s
      timeout: 15s
      retries: 5
      start_period: 60s
    networks:
      - erp-network
    profiles:
      - full-stack

  # Next.js Frontend - Main Web Application (Optimized)
  erp-frontend:
    build:
      context: ../erp-frontend
      dockerfile: Dockerfile.dev
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-frontend
    user: "root"
    env_file:
      - .env.frontend
    environment:
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_OPTIONS=--max-old-space-size=4096
      - WATCHPACK_POLLING=false
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ../erp-frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    depends_on:
      api-gateway:
        condition: service_healthy
      graphql-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 60s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 6g
          cpus: '2.0'
        reservations:
          memory: 1g
          cpus: '0.5'
    networks:
      - erp-network
    profiles:
      - full-stack

  log-service:
    build:
      context: ../erp-log-service
      dockerfile: Dockerfile.dev
    container_name: ${COMPOSE_PROJECT_NAME:-erp-suite}-log-service
    user: "1001:1001"
    # Use air from PATH (installed in Dockerfile)
    # command: /go/bin/air -c .air.toml
    ports:
      - "${LOG_SERVICE_HTTP_PORT:-8001}:8001"
      - "${LOG_SERVICE_GRPC_PORT:-50052}:50052"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-erp_system}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      KAFKA_BROKERS: kafka:${KAFKA_INTERNAL_PORT:-29092}
      AUTH_SERVICE_GRPC_HOST: auth-service
      AUTH_SERVICE_GRPC_PORT: ${AUTH_SERVICE_GRPC_PORT:-50051}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      HTTP_PORT: 8001
      GRPC_PORT: 50052
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 120s
      timeout: 15s
      retries: 3
      start_period: 90s
    volumes:
      - ../erp-log-service:/app
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started
      api-gateway:
        condition: service_started
    networks:
      - erp-network
    profiles:
      - full-stack

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  qdrant_data:
  kafka_data:
  elasticsearch_data:
  elasticsearch_config:
  pgadmin_data:
  consul_data:
  frontend_node_modules:
  frontend_next:

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  erp-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}
